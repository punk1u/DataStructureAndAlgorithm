package tech.punklu.algorithm.sort;

/**
 * 冒泡排序算法
 *
 * 冒泡排序算法只需要常量级的临时空间，所以它的空间复杂度为O(1)，是一个原地排序算法
 *
 * 在冒泡排序中，只有交换才可以改变两个元素的前后顺序。为了保证冒泡排序算法的稳定性，
 * 当有相邻的两个元素大小相等的时候，不做交换，相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。
 *
 * 最好情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡操作，就可以结束了，所以最好情况时间复杂度是O(n)。
 * 而最坏的情况是，要排序的数据刚好是倒序排列的，需要进行n次冒泡操作，所以最坏情况时间复杂度为O(n^2)。平均情况下的时间复杂度也为O(n^2)。
 */
public class BubbleSort {

    /**
     * 在这个嵌套循环中，第一次循环会找出所有元素中最大的一个值并放到它应该处在的最后一个位置，
     * 在第二次的嵌套循环中，因为已经处理好了最后的一个值。所以这里内部的for循环不再需要遍历所有元素，
     * 此时的i为1，即只需要遍历n-1-1次即可，这样就可以将倒数第二大的数排序好。
     * 如此不断嵌套循环，直到最终遍历结束，或在遍历结束之前就已经排好序了（一次遍历中没有数据交换就说明已经排序好了），
     * 直接退出即可。
     * @param a
     * @param n
     */
    public void bubbleSort(int[] a, int n) {
        if (n <= 1) return;

        for (int i = 0; i < n; ++i) {
            /**
             * 已经排序好，提前退出冒泡循环的标志位
             */
            boolean flag = false;
            for (int j = 0; j < n - i - 1; ++j) {
                /**
                 * 判断并交换数据
                 */
                if (a[j] > a[j+1]) {
                    int tmp = a[j];
                    a[j] = a[j+1];
                    a[j+1] = tmp;
                    /**
                     * 表示有数据交换
                     */
                    flag = true;
                }
            }
            /**
             * 本次循环没有数据交换，说明已经是有序状态的了，提前退出
             */
            if (!flag) {
                break;
            }
        }
    }
}
