package tech.punklu.leetcode;

/**
 * 给定一个非负整数数组，你最初位于数组的第一个位置。
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 * 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
 * 假设你总是可以到达数组的最后一个位置。
 *
 *
 * 示例 1:
 * 输入: [2,3,1,1,4]
 * 输出: 2
 * 解释: 跳到最后一个位置的最小跳跃数是 2。
 *      从下标为 0 跳到下标为 1 的位置，跳1步，然后跳3步到达数组的最后一个位置。
 *
 * 示例 2:
 * 输入: [2,3,0,1,4]
 * 输出: 2
 *
 * 提示:
 *
 * 1 <= nums.length <= 1000
 * 0 <= nums[i] <= 105
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/jump-game-ii
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class LC45 {

    /**
     * 从第一个元素开始向后遍历，每遍历一个元素，都有一个
     * 相当于当前元素能够到达的最远位置（边界），从当前位置向后遍历，
     * 如果在从当前位置到边界的这段元素中，有元素能到达的最远位置大于当前边界的话，
     * 则这个元素能到达的最远位置即为下一个边界，每个边界都代表一步，不断向后遍历，
     * 每一步（边界）都使用贪心思想找出能够到达的最远位置，直到遍历结束
     *
     * 举例：
     * 2,3,1,1,4,2,1
     *
     * 开始的位置是 2，可跳的是第二个元素3和第三个元素1。然后因为 3 可以跳的更远，所以跳到 3 的位置。
     * 现在的位置就是 3 了，能跳的范围是1,1,4，然后因为 4 可以跳的更远，所以下次跳到 4 的位置。
     * 现在的位置是4,能跳的范围是2,1，可以直接达到最后一个元素，所以最终的结果是3，仅需3步就可以完成
     *
     * @param nums
     * @return
     */
    public static int jump(int[] nums) {
        /**
         * end表示在当前位置上能跳到的最远位置（边界）
         */
        int end = 0;
        int maxPosition = 0;
        int steps = 0;
        for(int i = 0; i < nums.length - 1; i++){
            /**
             * 找能跳的最远的
             */
            maxPosition = Math.max(maxPosition, nums[i] + i);
            /**
             * 遇到边界，就更新边界（将边界更新为目前找出的最远可到达的位置），
             * 并且步数加一(因为从当前i值跳到边界中的任何一个可以到达最远位置maxPosition的位置都需要一步)
             */
            if( i == end){
                end = maxPosition;
                steps++;
            }
        }
        return steps;
    }

    public static void main(String[] args) {
        int[] nums = {2,3,1,1,4};
        System.out.println(jump(nums));
    }
}
